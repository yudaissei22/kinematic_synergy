import time
import mujoco
from mujoco import viewer
import numpy as np
import os

model = mujoco.MjModel.from_xml_path("../models/scene.xml")
data = mujoco.MjData(model)
view = viewer.launch_passive(model, data)

def move():
  p1 = angle_primitive(6, 0, 30, 1, 1, 1)
  p2 = angle_primitive(6, 30, -30, 1, -0.5, -0.5)
  for t in range(3000):
      data.actuator(0).ctrl[:] = p1[t-1][1] # shoulder 
      data.actuator(2).ctrl[:] = p1[t-1][2] # elbow
      data.actuator(4).ctrl[:] = p1[t-1][3] # wrist
      mujoco.mj_step(model, data)
      view.sync()
      time.sleep(0.002)
  for k in range(3000):
      data.actuator(0).ctrl[:] = p2[k-1][1] # shoulder 
      data.actuator(2).ctrl[:] = p2[k-1][2] # elbow
      data.actuator(4).ctrl[:] = p2[k-1][3] # wrist
      mujoco.mj_step(model, data)
      view.sync()
      time.sleep(0.002)
def p1():
  p1 = angle_primitive(6, 0, 30, 1, 1, 1)
  for t in range(3000):
      data.actuator(0).ctrl[:] = p1[t-1][1] # shoulder 
      data.actuator(2).ctrl[:] = p1[t-1][2] # elbow
      data.actuator(4).ctrl[:] = p1[t-1][3] # wrist
      mujoco.mj_step(model, data)
      view.sync()
      time.sleep(0.002)
  
def p2():
  p2 = angle_primitive(6, data.qpos[], -30, 1, -0.5, -0.5)
  for k in range(3000):
      data.actuator(0).ctrl[:] = p2[k-1][1] # shoulder 
      data.actuator(2).ctrl[:] = p2[k-1][2] # elbow
      data.actuator(4).ctrl[:] = p2[k-1][3] # wrist
      mujoco.mj_step(model, data)
      view.sync()
      time.sleep(0.002)


def tmp():
  for k in range(3000):
      data.actuator(0).ctrl[:] = -30 
      data.actuator(2).ctrl[:] = 15
      data.actuator(4).ctrl[:] = 15
      mujoco.mj_step(model, data)
      view.sync()
      time.sleep(0.002)
      
# def test():
#   for t in range():
#     data.actuator(0).ctrl[:] = spatiotemp[][1] # shoulder 
#     data.actuator(2).ctrl[:] = spatiotemp[][2] # elbow
#     data.actuator(4).ctrl[:] = spatiotemp[][3] # wrist
#     mujoco.mj_step(model, data)
#     view.sync()
#     time.sleep(0.002)


  
def angle_primitive(time, initial_angle, final_angle, a, b, c):

  radian_initial_angle = np.pi / 180 * initial_angle
  radian_final_angle = np.pi / 180 * final_angle
  t = int(time * 500)
  velo_angle = (radian_final_angle - radian_initial_angle) / t  
  spatiotemp = np.zeros((t, 4))

  for i in range(t):
    j = i * 0.002
    shoulder_angle = radian_initial_angle * velo_angle * j
    elbow_angle = shoulder_angle * b / a
    wrist_angle = shoulder_angle * b / a
    spatiotemp[i-1][0] = i
    spatiotemp[i-1][1] = shoulder_angle 
    spatiotemp[i-1][2] = elbow_angle
    spatiotemp[i-1][3] = wrist_angle

  return spatiotemp
