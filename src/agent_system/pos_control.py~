import time
import mujoco
from mujoco import viewer
import numpy as np
import os
import matplotlib.pyplot as plt


model = mujoco.MjModel.from_xml_path("models/scene.xml")
data = mujoco.MjData(model)
view = viewer.launch_passive(model, data)

def syn():
    #implement joint angle based on kinematic synergy
    shoulder_angle = 0
    elbow_angle = 0
    wrist_angle = 0

    shoulder = []
    elbow = []
    wrist = []
    x = []
    q = data.qpos
    v = data.qvel
    
    for i in range(3000):
        
      shoulder_angle = np.pi / 180 * 30  * i / 3000
        
      # define ratio
      a = 1
      b = 1
      elbow_angle = a * shoulder_angle
      wrist_angle = b * shoulder_angle

      shoulder.append(shoulder_angle)
      elbow.append(elbow_angle)
      wrist.append(wrist_angle)
  #    x.append(0.02*i)
      
      # print("shoulder_angle is", shoulder)
      # print("elbow_angle is", elbow)
      # print("wrist_angle is", wrist)
      
      # move
      data.actuator(0).ctrl[:] = shoulder_angle
      data.actuator(2).ctrl[:] = elbow_angle
      data.actuator(4).ctrl[:] = wrist_angle
      mujoco.mj_step(model, data)
      view.sync()
      time.sleep(0.002)

    x = np.linspace(-4, 4, 3000)
    plt.plot(x, shoulder, color='blue', label='shoulder')
    plt.plot(x, elbow, color="red", label='elbow')
    plt.plot(x, wrist, color="green", label='wrist')
    # plt.plot(x, q, color='blue', label='shoulder')
    # plt.plot(x, elbow, color="red", label='elbow')
    # plt.plot(x, wrist, color="green", label='wrist')
    
    plt.show()

    print(x)
    print(shoulder_angle)
    print(elbow_angle)
    print(wrist_angle)

    
      
def ratio(shoulder_angle, a, b):
    elbow_angle = a * shoulder_angle
    wrist_angle = b* shoulder_angle


    
def test():
  for t in range(3000):
      # [rad]
    data.actuator(0).ctrl[:] = -1 + np.sin(t/1000*2*np.pi)
    data.actuator(1).ctrl[:] = -1 + np.sin(t/1000*2*np.pi)
    data.actuator(2).ctrl[:] = -1 + np.sin(t/1000*2*np.pi)
    q = data.qpos
    vel = data.qvel
    print("joint position is",q)
    print("joint velocity is", vel)
    mujoco.mj_step(model, data)
    view.sync()
    time.sleep(0.002)
    
